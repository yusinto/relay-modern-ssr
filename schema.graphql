type AddToCustomerTransactionsPayload {
  viewer: Viewer!
  clientMutationId: String!
  transactionsTransaction: Transaction
  customerCustomer: Customer
  transactionsTransactionEdge: TransactionEdge
  customerCustomerEdge: CustomerEdge
}

input AddToCustomerTransactionsTransactionInput {
  customerCustomerId: ID!
  transactionsTransactionId: ID!
  clientMutationId: String!
}

input AddToStripeSourcesCustomerInput {
  stripeSourcesStripeSourceId: ID!
  customerCustomerId: ID!
  clientMutationId: String!
}

type AddToStripeSourcesPayload {
  viewer: Viewer!
  clientMutationId: String!
  customerCustomer: Customer
  stripeSourcesStripeSource: StripeSource
  customerCustomerEdge: CustomerEdge
  stripeSourcesStripeSourceEdge: StripeSourceEdge
}

# The `BigDecimal` scalar type represents signed fractional values with arbitrary precision.
scalar BigDecimal

# The `BigInt` scalar type represents non-fractional signed whole numeric values. BigInt can represent arbitrary big values.
scalar BigInt

input CreateCustomer {
  email: String!
  loginType: CUSTOMER_LOGIN_TYPE!
  stripeCustomerId: String
  stripeSourcesIds: [ID!]
  transactionsIds: [ID!]
  transactions: [CustomertransactionsTransaction!]
}

input CreateCustomerInput {
  email: String!
  loginType: CUSTOMER_LOGIN_TYPE!
  stripeCustomerId: String
  stripeSourcesIds: [ID!]
  transactionsIds: [ID!]
  transactions: [CustomertransactionsTransaction!]
  clientMutationId: String!
}

type CreateCustomerPayload {
  viewer: Viewer!
  clientMutationId: String!
  customer: Customer
  edge: CustomerEdge
}

input CreateFile {
  name: String!
}

input CreateFileInput {
  name: String!
  clientMutationId: String!
}

type CreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input CreateStripeSource {
  customerId: ID
  customer: StripeSourcecustomerCustomer
}

input CreateStripeSourceInput {
  customerId: ID
  customer: StripeSourcecustomerCustomer
  clientMutationId: String!
}

type CreateStripeSourcePayload {
  viewer: Viewer!
  clientMutationId: String!
  stripeSource: StripeSource
  edge: StripeSourceEdge
  customer: Customer
}

input CreateTransaction {
  amount: Float!
  brand: String!
  last4: String!
  pin: String!
  status: TRANSACTION_STATUS!
  stripeSourceId: String!
  customerId: ID
  customer: TransactioncustomerCustomer
}

input CreateTransactionInput {
  amount: Float!
  brand: String!
  last4: String!
  pin: String!
  status: TRANSACTION_STATUS!
  stripeSourceId: String!
  customerId: ID
  customer: TransactioncustomerCustomer
  clientMutationId: String!
}

type CreateTransactionPayload {
  viewer: Viewer!
  clientMutationId: String!
  transaction: Transaction
  edge: TransactionEdge
  customer: Customer
}

# If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
type CreateUserPayload {
  user: User
  clientMutationId: String
  viewer: Viewer!
}

type Customer implements Node {
  createdAt: DateTime!
  email: String!
  id: ID!
  loginType: CUSTOMER_LOGIN_TYPE!
  stripeCustomerId: String
  stripeSources(filter: StripeSourceFilter, orderBy: StripeSourceOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): StripeSourceConnection
  transactions(filter: TransactionFilter, orderBy: TransactionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): TransactionConnection
  updatedAt: DateTime!
}

enum CUSTOMER_LOGIN_TYPE {
  Facebook
  Google
}

# A connection to a list of items.
type CustomerConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CustomerEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type CustomerEdge {
  # The item at the end of the edge.
  node: Customer!

  # A cursor for use in pagination.
  cursor: String!
}

input CustomerFilter {
  # Logical AND on all given filters.
  AND: [CustomerFilter!]

  # Logical OR on all given filters.
  OR: [CustomerFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  email: String

  # All values that are not equal to given value.
  email_not: String

  # All values that are contained in given list.
  email_in: [String!]

  # All values that are not contained in given list.
  email_not_in: [String!]

  # All values less than the given value.
  email_lt: String

  # All values less than or equal the given value.
  email_lte: String

  # All values greater than the given value.
  email_gt: String

  # All values greater than or equal the given value.
  email_gte: String

  # All values containing the given string.
  email_contains: String

  # All values not containing the given string.
  email_not_contains: String

  # All values starting with the given string.
  email_starts_with: String

  # All values not starting with the given string.
  email_not_starts_with: String

  # All values ending with the given string.
  email_ends_with: String

  # All values not ending with the given string.
  email_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  loginType: CUSTOMER_LOGIN_TYPE

  # All values that are not equal to given value.
  loginType_not: CUSTOMER_LOGIN_TYPE

  # All values that are contained in given list.
  loginType_in: [CUSTOMER_LOGIN_TYPE!]

  # All values that are not contained in given list.
  loginType_not_in: [CUSTOMER_LOGIN_TYPE!]
  stripeCustomerId: String

  # All values that are not equal to given value.
  stripeCustomerId_not: String

  # All values that are contained in given list.
  stripeCustomerId_in: [String!]

  # All values that are not contained in given list.
  stripeCustomerId_not_in: [String!]

  # All values less than the given value.
  stripeCustomerId_lt: String

  # All values less than or equal the given value.
  stripeCustomerId_lte: String

  # All values greater than the given value.
  stripeCustomerId_gt: String

  # All values greater than or equal the given value.
  stripeCustomerId_gte: String

  # All values containing the given string.
  stripeCustomerId_contains: String

  # All values not containing the given string.
  stripeCustomerId_not_contains: String

  # All values starting with the given string.
  stripeCustomerId_starts_with: String

  # All values not starting with the given string.
  stripeCustomerId_not_starts_with: String

  # All values ending with the given string.
  stripeCustomerId_ends_with: String

  # All values not ending with the given string.
  stripeCustomerId_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  stripeSources_every: StripeSourceFilter
  stripeSources_some: StripeSourceFilter
  stripeSources_none: StripeSourceFilter
  transactions_every: TransactionFilter
  transactions_some: TransactionFilter
  transactions_none: TransactionFilter
}

enum CustomerOrderBy {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  loginType_ASC
  loginType_DESC
  stripeCustomerId_ASC
  stripeCustomerId_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CustomertransactionsTransaction {
  amount: Float!
  brand: String!
  last4: String!
  pin: String!
  status: TRANSACTION_STATUS!
  stripeSourceId: String!
}

scalar DateTime

input DeleteCustomerInput {
  id: ID!
  clientMutationId: String!
}

type DeleteCustomerPayload {
  viewer: Viewer!
  clientMutationId: String!
  customer: Customer
  edge: CustomerEdge
  deletedId: ID
}

input DeleteFileInput {
  id: ID!
  clientMutationId: String!
}

type DeleteFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
  deletedId: ID
}

input DeleteStripeSourceInput {
  id: ID!
  clientMutationId: String!
}

type DeleteStripeSourcePayload {
  viewer: Viewer!
  clientMutationId: String!
  stripeSource: StripeSource
  edge: StripeSourceEdge
  customer: Customer
  deletedId: ID
}

input DeleteTransactionInput {
  id: ID!
  clientMutationId: String!
}

type DeleteTransactionPayload {
  viewer: Viewer!
  clientMutationId: String!
  transaction: Transaction
  edge: TransactionEdge
  customer: Customer
  deletedId: ID
}

input DeleteUserInput {
  id: ID!
  clientMutationId: String!
}

type DeleteUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
  deletedId: ID
}

type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  secret: String!
  size: Int!
  updatedAt: DateTime!
  url: String!
}

# A connection to a list of items.
type FileConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FileEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type FileEdge {
  # The item at the end of the edge.
  node: File!

  # A cursor for use in pagination.
  cursor: String!
}

input FileFilter {
  # Logical AND on all given filters.
  AND: [FileFilter!]

  # Logical OR on all given filters.
  OR: [FileFilter!]
  contentType: String

  # All values that are not equal to given value.
  contentType_not: String

  # All values that are contained in given list.
  contentType_in: [String!]

  # All values that are not contained in given list.
  contentType_not_in: [String!]

  # All values less than the given value.
  contentType_lt: String

  # All values less than or equal the given value.
  contentType_lte: String

  # All values greater than the given value.
  contentType_gt: String

  # All values greater than or equal the given value.
  contentType_gte: String

  # All values containing the given string.
  contentType_contains: String

  # All values not containing the given string.
  contentType_not_contains: String

  # All values starting with the given string.
  contentType_starts_with: String

  # All values not starting with the given string.
  contentType_not_starts_with: String

  # All values ending with the given string.
  contentType_ends_with: String

  # All values not ending with the given string.
  contentType_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  secret: String

  # All values that are not equal to given value.
  secret_not: String

  # All values that are contained in given list.
  secret_in: [String!]

  # All values that are not contained in given list.
  secret_not_in: [String!]

  # All values less than the given value.
  secret_lt: String

  # All values less than or equal the given value.
  secret_lte: String

  # All values greater than the given value.
  secret_gt: String

  # All values greater than or equal the given value.
  secret_gte: String

  # All values containing the given string.
  secret_contains: String

  # All values not containing the given string.
  secret_not_contains: String

  # All values starting with the given string.
  secret_starts_with: String

  # All values not starting with the given string.
  secret_not_starts_with: String

  # All values ending with the given string.
  secret_ends_with: String

  # All values not ending with the given string.
  secret_not_ends_with: String
  size: Int

  # All values that are not equal to given value.
  size_not: Int

  # All values that are contained in given list.
  size_in: [Int!]

  # All values that are not contained in given list.
  size_not_in: [Int!]

  # All values less than the given value.
  size_lt: Int

  # All values less than or equal the given value.
  size_lte: Int

  # All values greater than the given value.
  size_gt: Int

  # All values greater than or equal the given value.
  size_gte: Int
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  url: String

  # All values that are not equal to given value.
  url_not: String

  # All values that are contained in given list.
  url_in: [String!]

  # All values that are not contained in given list.
  url_not_in: [String!]

  # All values less than the given value.
  url_lt: String

  # All values less than or equal the given value.
  url_lte: String

  # All values greater than the given value.
  url_gt: String

  # All values greater than or equal the given value.
  url_gte: String

  # All values containing the given string.
  url_contains: String

  # All values not containing the given string.
  url_not_contains: String

  # All values starting with the given string.
  url_starts_with: String

  # All values not starting with the given string.
  url_not_starts_with: String

  # All values ending with the given string.
  url_ends_with: String

  # All values not ending with the given string.
  url_not_ends_with: String
}

enum FileOrderBy {
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  secret_ASC
  secret_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

# The `Long` scalar type represents non-fractional signed whole numeric values.
# Long can represent values between -(2^63) and 2^63 - 1.
scalar Long

type Mutation {
  createCustomer(input: CreateCustomerInput!): CreateCustomerPayload
  createFile(input: CreateFileInput!): CreateFilePayload
  createStripeSource(input: CreateStripeSourceInput!): CreateStripeSourcePayload
  createTransaction(input: CreateTransactionInput!): CreateTransactionPayload
  updateCustomer(input: UpdateCustomerInput!): UpdateCustomerPayload
  updateFile(input: UpdateFileInput!): UpdateFilePayload
  updateStripeSource(input: UpdateStripeSourceInput!): UpdateStripeSourcePayload
  updateTransaction(input: UpdateTransactionInput!): UpdateTransactionPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updateOrCreateCustomer(input: UpdateOrCreateCustomerInput!): UpdateOrCreateCustomerPayload
  updateOrCreateFile(input: UpdateOrCreateFileInput!): UpdateOrCreateFilePayload
  updateOrCreateStripeSource(input: UpdateOrCreateStripeSourceInput!): UpdateOrCreateStripeSourcePayload
  updateOrCreateTransaction(input: UpdateOrCreateTransactionInput!): UpdateOrCreateTransactionPayload
  updateOrCreateUser(input: UpdateOrCreateUserInput!): UpdateOrCreateUserPayload
  deleteCustomer(input: DeleteCustomerInput!): DeleteCustomerPayload
  deleteFile(input: DeleteFileInput!): DeleteFilePayload
  deleteStripeSource(input: DeleteStripeSourceInput!): DeleteStripeSourcePayload
  deleteTransaction(input: DeleteTransactionInput!): DeleteTransactionPayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
  addToCustomerTransactions(input: AddToCustomerTransactionsTransactionInput!): AddToCustomerTransactionsPayload
  addToStripeSources(input: AddToStripeSourcesCustomerInput!): AddToStripeSourcesPayload
  removeFromStripeSources(input: RemoveFromStripeSourcesCustomerInput!): RemoveFromStripeSourcesPayload
  createUser(input: SignupUserInput!): CreateUserPayload!
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  viewer: Viewer!

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

input RemoveFromStripeSourcesCustomerInput {
  stripeSourcesStripeSourceId: ID!
  customerCustomerId: ID!
  clientMutationId: String!
}

type RemoveFromStripeSourcesPayload {
  viewer: Viewer!
  clientMutationId: String!
  customerCustomer: Customer
  stripeSourcesStripeSource: StripeSource
  customerCustomerEdge: CustomerEdge
  stripeSourcesStripeSourceEdge: StripeSourceEdge
}

input SignupUserInput {
  clientMutationId: String!
}

type StripeSource implements Node {
  createdAt: DateTime!
  customer(filter: CustomerFilter): Customer
  id: ID!
  updatedAt: DateTime!
}

# A connection to a list of items.
type StripeSourceConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [StripeSourceEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

input StripeSourcecustomerCustomer {
  email: String!
  loginType: CUSTOMER_LOGIN_TYPE!
  stripeCustomerId: String
  stripeSourcesIds: [ID!]
  transactionsIds: [ID!]
  transactions: [StripeSourcecustomerCustomertransactionsTransaction!]
}

input StripeSourcecustomerCustomertransactionsTransaction {
  amount: Float!
  brand: String!
  last4: String!
  pin: String!
  status: TRANSACTION_STATUS!
  stripeSourceId: String!
}

# An edge in a connection.
type StripeSourceEdge {
  # The item at the end of the edge.
  node: StripeSource!

  # A cursor for use in pagination.
  cursor: String!
}

input StripeSourceFilter {
  # Logical AND on all given filters.
  AND: [StripeSourceFilter!]

  # Logical OR on all given filters.
  OR: [StripeSourceFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  customer: CustomerFilter
}

enum StripeSourceOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

# Requests for cash, completed and cancelled requests are all stored here
type Transaction implements Node {
  amount: Float!
  brand: String!
  createdAt: DateTime!
  customer(filter: CustomerFilter): Customer!
  id: ID!
  last4: String!
  pin: String!
  status: TRANSACTION_STATUS!
  stripeSourceId: String!
  updatedAt: DateTime!
}

enum TRANSACTION_STATUS {
  Requested
  Completed
  Cancelled
}

# A connection to a list of items.
type TransactionConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TransactionEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

input TransactioncustomerCustomer {
  email: String!
  loginType: CUSTOMER_LOGIN_TYPE!
  stripeCustomerId: String
  stripeSourcesIds: [ID!]
  transactionsIds: [ID!]
  transactions: [TransactioncustomerCustomertransactionsTransaction!]
}

input TransactioncustomerCustomertransactionsTransaction {
  amount: Float!
  brand: String!
  last4: String!
  pin: String!
  status: TRANSACTION_STATUS!
  stripeSourceId: String!
}

# An edge in a connection.
type TransactionEdge {
  # The item at the end of the edge.
  node: Transaction!

  # A cursor for use in pagination.
  cursor: String!
}

input TransactionFilter {
  # Logical AND on all given filters.
  AND: [TransactionFilter!]

  # Logical OR on all given filters.
  OR: [TransactionFilter!]
  amount: Float

  # All values that are not equal to given value.
  amount_not: Float

  # All values that are contained in given list.
  amount_in: [Float!]

  # All values that are not contained in given list.
  amount_not_in: [Float!]

  # All values less than the given value.
  amount_lt: Float

  # All values less than or equal the given value.
  amount_lte: Float

  # All values greater than the given value.
  amount_gt: Float

  # All values greater than or equal the given value.
  amount_gte: Float
  brand: String

  # All values that are not equal to given value.
  brand_not: String

  # All values that are contained in given list.
  brand_in: [String!]

  # All values that are not contained in given list.
  brand_not_in: [String!]

  # All values less than the given value.
  brand_lt: String

  # All values less than or equal the given value.
  brand_lte: String

  # All values greater than the given value.
  brand_gt: String

  # All values greater than or equal the given value.
  brand_gte: String

  # All values containing the given string.
  brand_contains: String

  # All values not containing the given string.
  brand_not_contains: String

  # All values starting with the given string.
  brand_starts_with: String

  # All values not starting with the given string.
  brand_not_starts_with: String

  # All values ending with the given string.
  brand_ends_with: String

  # All values not ending with the given string.
  brand_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  last4: String

  # All values that are not equal to given value.
  last4_not: String

  # All values that are contained in given list.
  last4_in: [String!]

  # All values that are not contained in given list.
  last4_not_in: [String!]

  # All values less than the given value.
  last4_lt: String

  # All values less than or equal the given value.
  last4_lte: String

  # All values greater than the given value.
  last4_gt: String

  # All values greater than or equal the given value.
  last4_gte: String

  # All values containing the given string.
  last4_contains: String

  # All values not containing the given string.
  last4_not_contains: String

  # All values starting with the given string.
  last4_starts_with: String

  # All values not starting with the given string.
  last4_not_starts_with: String

  # All values ending with the given string.
  last4_ends_with: String

  # All values not ending with the given string.
  last4_not_ends_with: String
  pin: String

  # All values that are not equal to given value.
  pin_not: String

  # All values that are contained in given list.
  pin_in: [String!]

  # All values that are not contained in given list.
  pin_not_in: [String!]

  # All values less than the given value.
  pin_lt: String

  # All values less than or equal the given value.
  pin_lte: String

  # All values greater than the given value.
  pin_gt: String

  # All values greater than or equal the given value.
  pin_gte: String

  # All values containing the given string.
  pin_contains: String

  # All values not containing the given string.
  pin_not_contains: String

  # All values starting with the given string.
  pin_starts_with: String

  # All values not starting with the given string.
  pin_not_starts_with: String

  # All values ending with the given string.
  pin_ends_with: String

  # All values not ending with the given string.
  pin_not_ends_with: String
  status: TRANSACTION_STATUS

  # All values that are not equal to given value.
  status_not: TRANSACTION_STATUS

  # All values that are contained in given list.
  status_in: [TRANSACTION_STATUS!]

  # All values that are not contained in given list.
  status_not_in: [TRANSACTION_STATUS!]
  stripeSourceId: String

  # All values that are not equal to given value.
  stripeSourceId_not: String

  # All values that are contained in given list.
  stripeSourceId_in: [String!]

  # All values that are not contained in given list.
  stripeSourceId_not_in: [String!]

  # All values less than the given value.
  stripeSourceId_lt: String

  # All values less than or equal the given value.
  stripeSourceId_lte: String

  # All values greater than the given value.
  stripeSourceId_gt: String

  # All values greater than or equal the given value.
  stripeSourceId_gte: String

  # All values containing the given string.
  stripeSourceId_contains: String

  # All values not containing the given string.
  stripeSourceId_not_contains: String

  # All values starting with the given string.
  stripeSourceId_starts_with: String

  # All values not starting with the given string.
  stripeSourceId_not_starts_with: String

  # All values ending with the given string.
  stripeSourceId_ends_with: String

  # All values not ending with the given string.
  stripeSourceId_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  customer: CustomerFilter
}

enum TransactionOrderBy {
  amount_ASC
  amount_DESC
  brand_ASC
  brand_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  last4_ASC
  last4_DESC
  pin_ASC
  pin_DESC
  status_ASC
  status_DESC
  stripeSourceId_ASC
  stripeSourceId_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UpdateCustomer {
  email: String
  id: ID!
  loginType: CUSTOMER_LOGIN_TYPE
  stripeCustomerId: String
  stripeSourcesIds: [ID!]
  transactionsIds: [ID!]
  transactions: [CustomertransactionsTransaction!]
}

input UpdateCustomerInput {
  email: String
  id: ID!
  loginType: CUSTOMER_LOGIN_TYPE
  stripeCustomerId: String
  stripeSourcesIds: [ID!]
  transactionsIds: [ID!]
  transactions: [CustomertransactionsTransaction!]
  clientMutationId: String!
}

type UpdateCustomerPayload {
  viewer: Viewer!
  clientMutationId: String!
  customer: Customer
  edge: CustomerEdge
}

input UpdateFile {
  id: ID!
  name: String
}

input UpdateFileInput {
  id: ID!
  name: String
  clientMutationId: String!
}

type UpdateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input UpdateOrCreateCustomerInput {
  update: UpdateCustomer!
  create: CreateCustomer!
  clientMutationId: String!
}

type UpdateOrCreateCustomerPayload {
  viewer: Viewer!
  clientMutationId: String!
  customer: Customer
  edge: CustomerEdge
}

input UpdateOrCreateFileInput {
  update: UpdateFile!
  create: CreateFile!
  clientMutationId: String!
}

type UpdateOrCreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input UpdateOrCreateStripeSourceInput {
  update: UpdateStripeSource!
  create: CreateStripeSource!
  clientMutationId: String!
}

type UpdateOrCreateStripeSourcePayload {
  viewer: Viewer!
  clientMutationId: String!
  stripeSource: StripeSource
  edge: StripeSourceEdge
  customer: Customer
}

input UpdateOrCreateTransactionInput {
  update: UpdateTransaction!
  create: CreateTransaction!
  clientMutationId: String!
}

type UpdateOrCreateTransactionPayload {
  viewer: Viewer!
  clientMutationId: String!
  transaction: Transaction
  edge: TransactionEdge
  customer: Customer
}

input UpdateOrCreateUserInput {
  update: UpdateUser!
  clientMutationId: String!
}

type UpdateOrCreateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

input UpdateStripeSource {
  id: ID!
  customerId: ID
  customer: StripeSourcecustomerCustomer
}

input UpdateStripeSourceInput {
  id: ID!
  customerId: ID
  customer: StripeSourcecustomerCustomer
  clientMutationId: String!
}

type UpdateStripeSourcePayload {
  viewer: Viewer!
  clientMutationId: String!
  stripeSource: StripeSource
  edge: StripeSourceEdge
  customer: Customer
}

input UpdateTransaction {
  amount: Float
  brand: String
  id: ID!
  last4: String
  pin: String
  status: TRANSACTION_STATUS
  stripeSourceId: String
  customerId: ID
  customer: TransactioncustomerCustomer
}

input UpdateTransactionInput {
  amount: Float
  brand: String
  id: ID!
  last4: String
  pin: String
  status: TRANSACTION_STATUS
  stripeSourceId: String
  customerId: ID
  customer: TransactioncustomerCustomer
  clientMutationId: String!
}

type UpdateTransactionPayload {
  viewer: Viewer!
  clientMutationId: String!
  transaction: Transaction
  edge: TransactionEdge
  customer: Customer
}

input UpdateUser {
  id: ID!
}

input UpdateUserInput {
  id: ID!
  clientMutationId: String!
}

type UpdateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

type User implements Node {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge.
  node: User!

  # A cursor for use in pagination.
  cursor: String!
}

input UserFilter {
  # Logical AND on all given filters.
  AND: [UserFilter!]

  # Logical OR on all given filters.
  OR: [UserFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

enum UserOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

# This is the famous Relay viewer object
type Viewer {
  allCustomers(filter: CustomerFilter, orderBy: CustomerOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): CustomerConnection!
  allFiles(filter: FileFilter, orderBy: FileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  allStripeSources(filter: StripeSourceFilter, orderBy: StripeSourceOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): StripeSourceConnection!
  allTransactions(filter: TransactionFilter, orderBy: TransactionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): TransactionConnection!
  allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  user: User
  Customer(id: ID): Customer
  File(id: ID, secret: String, url: String): File
  StripeSource(id: ID): StripeSource
  Transaction(id: ID): Transaction
  User(id: ID): User
  id: ID!
}

